<?xml version="1.0" encoding="UTF-8"?>
<root>
	<members category="IPublishedContent">
		<property name="Parent">
			<description>A reference to the node's parent</description>
		</property>
		<property name="Id" type="integer">
			<description>The id of the node in Umbraco</description>
		</property>
		<property name="TemplateId" type="integer">
			<description>
				If a template has been assigned, its id is returned here.
			</description>
		</property>
		<property name="SortOrder" type="integer">
			<description/>
		</property>
		<property name="Name" type="string">
			<description/>
		</property>
		<property name="Url" type="string">
			<description>
				The absolute URL (e.g. <code>/my/page/about-url/</code>) of the content item. Whenever you need to link to a page,
				this is what you should use.
			</description>
			<note>
				If the config setting <code>&lt;useDomainPrefixes&gt;</code> in umbracoSetting.config is <code>true</code>,
				this will return a full URL with protocol, hostname &amp; port etc.
			</note>
		</property>
		<property name="UrlName" type="string">
			<description>
				<p>
					A URL-safe version of the node's name, e.g. for a document named <strong>About Us</strong>
					the UrlName property would be generated as <var>about-us</var>.
				</p>
				<p>Also good for anchor links to various sections on a page (see code example)</p>
			</description>
		</property>
		<property name="DocumentTypeAlias" type="string">
			<description>
				Returns the alias of the Document Type used by this content item.
			</description>
		</property>
		<property name="WriterName" type="string">
			<description/>
		</property>
		<property name="CreatorName" type="string">
			<description/>
		</property>
		<property name="WriterID" type="integer">
			<description/>
		</property>
		<property name="CreatorID" type="integer">
			<description/>
		</property>
		<property name="Path" type="string">
			<description>
				A CSV string of the ids of the nodes in the ancestor axis, e.g.: <var>"-1,1060,2590"</var>
			</description>
		</property>
		<property name="CreateDate" type="datetime">
			<description/>
		</property>
		<property name="UpdateDate" type="datetime">
			<description/>
		</property>
		<property name="Level" type="integer">
			<description/>
		</property>
		<function name="GetTemplateAlias" type="string">
			<description>
				The alias of the assigned template (if any).
			</description>
		</function>
		<function name="GetPropertyValue" type="object">
			<description>
				Outputs the value of the specified property. If the <var>recursive</var> argument is <var>true</var>,
				the value is taken from the first ancestor (or the node itself) that has a value for the property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
		</function>
		<function name="GetPropertyValue" type="object">
			<description>
				Outputs the value of the specified property. If the <var>recursive</var> argument is <var>true</var>,
				the value is taken from the first ancestor (or the node itself) that has a value for the property.
			</description>
			<argument name="propertyAlias" type="string" />
		</function>
		<function name="GetPropertyValue" type="object">
			<description>
				Outputs the value of the specified property. If the <var>recursive</var> argument is <var>true</var>,
				the value is taken from the first ancestor (or the node itself) that has a value for the property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="defaultValue" type="string" />
		</function>
		<function name="GetPropertyValue" type="object">
			<description>
				Outputs the value of the specified property. If the <var>recursive</var> argument is <var>true</var>,
				the value is taken from the first ancestor (or the node itself) that has a value for the property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="defaultValue" type="object" />
		</function>
		<function name="GetPropertyValue" type="object">
			<description>
				Outputs the value of the specified property. If the <var>recursive</var> argument is <var>true</var>,
				the value is taken from the first ancestor (or the node itself) that has a value for the property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
			<argument name="defaultValue" type="object" />
		</function>

		<function name="GetPropertyValue&lt;T&gt;" type="T">
			<description>
				Returns the value of the specified property as the type <var>T</var>.
			</description>
			<argument name="propertyAlias" type="string" />
		</function>
		<function name="GetPropertyValue&lt;T&gt;" type="T">
			<description>
				Outputs the value of the specified property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="defaultValue" type="T" />
		</function>
		<function name="GetPropertyValue&lt;T&gt;" type="T">
			<description>
				Outputs the value of the specified property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
		</function>
		<function name="GetPropertyValue&lt;T&gt;" type="T">
			<description>
				Outputs the value of the specified property.
			</description>
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
			<argument name="defaultValue" type="T" />
		</function>
	</members>
	
	<members category="Collections">
		<property name="Children">
			<description/>
		</property>
		<function name="Children&lt;T&gt;" type="collection">
			<description>
				Returns a collection of the children of type <strong>T</strong>.
			</description>
		</function>
		<property name="ChildrenAsList">
			<description/>
		</property>
		
		<function name="Ancestors" type="collection">
			<description/>
		</function>
		<function name="Ancestors" type="collection">
			<description/>
			<argument name="level" type="integer" required="yes"/>
		</function>
		<function name="Ancestors" type="collection">
			<description/>
			<argument name="nodeTypeAlias" type="string" required="yes" />
		</function>
		<function name="AncestorsOrSelf" type="collection">
			<description/>
		</function>
		<function name="AncestorsOrSelf" type="collection">
			<description/>
			<argument name="nodeTypeAlias" type="string" required="yes" />
		</function>
		<function name="AncestorsOrSelf" type="collection">
			<description/>
			<argument name="level" type="integer" required="yes"/>
		</function>
		<function name="Descendants">
			<description/>
		</function>
		<function name="Descendants">
			<description/>
			<argument name="nodeTypeAlias" type="string" required="yes" />
		</function>
		<function name="Descendants">
			<description/>
			<argument name="level" type="integer" required="yes"/>
		</function>
		<function name="DescendantsOrSelf">
			<description/>
		</function>
		<function name="DescendantsOrSelf">
			<description/>
			<argument name="level" type="integer" required="yes"/>
		</function>
		<function name="DescendantsOrSelf">
			<description/>
			<argument name="nodeTypeAlias" type="string" required="yes" />
		</function>
	</members>
	
	<members category="Traversing">
		<description>
			These are used for walking up/down the tree from any other node you might be on.
			They all return a single <code>IPublishedContent</code> node.
		</description>
		
		<property ref="Parent"/>
		<function name="AncestorOrSelf" type="node">
		</function>
		<function name="AncestorOrSelf" type="node">
			 <argument name="level" type="int" />
		</function>
		<function name="AncestorOrSelf" type="node">
			 <argument name="nodeTypeAlias" type="string" />
		</function>
		<function name="AncestorOrSelf" type="node">
			<argument name="func" type="lambda" />
		</function>
		<function name="First" type="node">
			<description/>
		</function>
		<function name="FirstChild">
			<description></description>
			<argument name="alias" type="string" />
		</function>
		<function name="FirstOrDefault" type="node">
			<description/>
		</function>
		<function name="Last" type="node">
			<description/>
		</function>
		<function name="LastOrDefault" type="node">
			<description/>
		</function>
		<function name="Single" type="node">
			<description/>
		</function>
		<function name="SingleOrDefault" type="node">
			<description/>
		</function>

		<function name="FollowingSibling" type="node">
		</function>
		<function name="FollowingSibling" type="node">
			<argument name="number" type="int" />
		</function>
		<function name="FollowingSibling" type="node">
			<argument name="nodeTypeAlias" type="string" />
		</function>
			
		<function name="PrecedingSibling" type="node">
		</function>
		<function name="PrecedingSibling" type="node">
			<argument name="number" type="int" />
		</function>
		<function name="PrecedingSibling" type="node">
			<argument name="nodeTypeAlias" type="string" />
		</function>
		
		<function name="Sibling" type="node">
			<description/>
			<argument name="number" type="integer" />
			<note type="warning">
				Obsolete - use <ref>FollowingSibling</ref> or <ref>PrecedingSibling</ref> instead.
			</note>
		</function>
		<function name="Sibling" type="node">
			<description/>
			<argument name="nodeTypeAlias" type="string" />
		</function>
		<function name="Up" type="node">
			<description/>
			<note type="warning">
				Obsolete - use <ref>Ancestors</ref> instead.
			</note>
		</function>
		<function name="Up" type="node">
			<description/>
			<argument name="number" type="integer" />
		</function>
		<function name="Down" type="node">
			<description/>
			<note type="warning">
				Obsolete - use <ref>Descendants</ref> instead.
			</note>
		</function>
		<function name="Down" type="node">
			<description/>
			<argument name="number" type="integer" />
		</function>
		<function name="Next" type="node">
			<description/>
			<note type="warning">
				Obsolete - use <ref>FollowingSibling</ref> instead.
			</note>
		</function>
		<function name="Next" type="node">
			<description/>
			<argument name="number" type="integer" />
		</function>
		<function name="Previous" type="node">
			<description/>
			<note type="warning">
				Obsolete - use <ref>PrecedingSibling</ref> instead.
			</note>
		</function>
		<function name="Previous" type="node">
			<description>
			</description>
			<argument name="number" type="integer" />
		</function>
	</members>
	
	<members category="Miscellaneous">
		<function name="HasProperty" type="boolean">
			<description>Returns a boolean value representing if the IPublishedContent has a property with the specified alias.</description>
			<argument name="propertyAlias" type="string" />
		</function>

		<function name="HasValue" type="boolean">
			<description>Returns a boolean value representing if the IPublishedContent property has had a value set.</description>
			<argument name="propertyAlias" type="string" />
		</function>

		<function name="HasValue" type="boolean">
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
		</function>

		<function name="HasValue" type="html">
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
			<argument name="valueIfTrue" type="string" />
			<argument name="valueIfFalse" type="string" required="no" />
		</function>

		<function name="IsNull" type="boolean">
			<description>Returns a boolean value representing if the IPublishedContent property is Null.</description>
			<argument name="propertyAlias" type="string" />
		</function>

		<function name="IsNull" type="boolean">
			<description></description>
			<argument name="propertyAlias" type="string" />
			<argument name="recursive" type="boolean" />
		</function>
		
		<function name="IsVisible" type="boolean">
			<description>
			</description>
			<note>This function requires a custom property with the alias <var>umbracoNaviHide</var> to work!</note>
		</function>
		
		<function name="Site" type="node" version="7">
			<description>
				Gets the ancestor at level 1
			</description>
			<note>In v8 this will be renamed to <code>.Root()</code></note>
		</function>
		
		<function name="GetCulture" type="System.Globalization.CultureInfo">
			<description>
				Gets the culture that would be selected to render a specified content,
				within the context of a specified current request.
			</description>
			<argument name="current" type="uri" required="no" />
		</function>
	</members>
	
	<members category="Filter &amp; Order">
		<description>
			When collecting nodes for a navigation or a listview, these come in very handy.
			They all work on and return a collection, so can can be chained for very effective results.
		</description>
		
		<function name="Where" type="collection">
			<description>
				
			</description>
			<argument name="func" type="lambda" />
		</function>
		
		<function name="OrderBy" type="collection">
			<description></description>
			<argument name="func" type="lambda" />
		</function>
		
		<function name="OrderByDescending" type="collection">
			<description></description>
			<argument name="func" type="lambda" />
		</function>
		
		<!-- .Union(IEnumerable<IPublishedContent>[,IEQualityComparer]) -->
		<!-- .Intersect(IEnumerable<IPublishedContent>[,IEQualityComparer]) -->
		<!-- .Except(IEnumerable<IPublishedContent>[,IEQualityComparer]) -->
		<!-- .Distinct([IEqualityComparer]) -->
		<function name="DistinctBy" type="collection">
			<description></description>
			<argument name="func" type="lambda" />
		</function>

		<function name="GroupBy" type="collection">
			<description></description>
			<argument name="func" type="lambda" />
		</function>

		<function name="TakeWhile" type="collection">
			<description></description>
			<argument name="func" type="lambda" />
		</function>

		<function name="SkipWhile" type="collection">
			<description></description>
			<argument name="func" type="lambda" />
		</function>

		<function name="Take" type="collection">
			<description></description>
			<argument name="number" type="int" />
		</function>

		<function name="Skip" type="collection">
			<description></description>
			<argument name="number" type="int" />
		</function>

		<function name="RandomOrder" type="collection">
			<description>
				Randomizes a collection's items. Combine with <ref>Take</ref> or <ref>FirstOrDefault</ref> to get a random piece
				of content to display somewhere.
			</description>
		</function>

		<function name="InGroupsOf" type="collection">
			<description></description>
			<argument name="number" type="int" />
		</function>
		
	</members>
	
</root>
